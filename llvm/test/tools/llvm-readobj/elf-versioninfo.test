## Test how llvm-readobj/llvm-readelf tools dump versioning sections.

# RUN: yaml2obj %s --docnum=1 -o %t1
# RUN: llvm-readobj -V %t1 | FileCheck %s --check-prefix=LLVM
# RUN: llvm-readelf -V %t1 | FileCheck %s --check-prefix=GNU

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  OSABI:   ELFOSABI_FREEBSD
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:         .gnu.version
    Type:         SHT_GNU_versym
    Flags:        [ SHF_ALLOC ]
    Link:         .dynsym
    AddressAlign: 0x0000000000000002
    EntSize:      0x0000000000000002
    Entries:      [ 0, 2, 3, 4, 5, 6]
  - Name:         .gnu.version_d
    Type:         SHT_GNU_verdef
    Flags:        [ SHF_ALLOC ]
    Link:         .dynstr
    AddressAlign: 0x0000000000000004
    Info:         0x0000000000000006
    Entries:
      - Version:    1
        Flags:      0
        VersionNdx: 0
        Hash:       0
        Names:
          - VERSION1
      - Version:    1
        Flags:      1
        VersionNdx: 0
        Hash:       0
        Names:
          - VERSION1
      - Version:    1
        Flags:      2
        VersionNdx: 0
        Hash:       0
        Names:
          - VERSION1
      - Version:    1
        Flags:      4
        VersionNdx: 0
        Hash:       0
        Names:
          - VERSION1
      - Version:    1
        Flags:      7
        VersionNdx: 2
        Hash:       175630257
        Names:
          - VERSION1
      - Version:    1
        Flags:      8
        VersionNdx: 3
        Hash:       175630258
        Names:
          - VERSION2
          - VERSION1
          - VERSION3
  - Name:         .gnu.version_r
    Type:         SHT_GNU_verneed
    Flags:        [ SHF_ALLOC ]
    Link:         .dynstr
    AddressAlign: 0x0000000000000004
    Info:         0x0000000000000002
    Dependencies:
      - Version: 1
        File:    verneed1.so.0
        Entries:
          - Name:  v1
            Hash:  0
            Flags: 1
            Other: 0
          - Name:  v1
            Hash:  0
            Flags: 2
            Other: 0
          - Name:  v1
            Hash:  0
            Flags: 4
            Other: 0
          - Name:  v1
            Hash:  1938
            Flags: 7
            Other: 4
          - Name:  v2
            Hash:  1939
            Flags: 8
            Other: 5
      - Version: 1
        File:    verneed2.so.0
        Entries:
          - Name:  v3
            Hash:  1937
            Flags: 0
            Other: 6
DynamicSymbols:
  - Name:            sym1
    Binding:         STB_GLOBAL
  - Name:            sym2
    Binding:         STB_GLOBAL
  - Name:            sym3
    Binding:         STB_GLOBAL
  - Name:            sym4
    Binding:         STB_GLOBAL
  - Name:            sym5
    Binding:         STB_GLOBAL
...

# LLVM:      VersionSymbols [
# LLVM-NEXT:   Symbol {
# LLVM-NEXT:     Version: 0
# LLVM-NEXT:     Name:
# LLVM-NEXT:   }
# LLVM-NEXT:   Symbol {
# LLVM-NEXT:     Version: 2
# LLVM-NEXT:     Name: sym1@@VERSION1
# LLVM-NEXT:   }
# LLVM-NEXT:   Symbol {
# LLVM-NEXT:     Version: 3
# LLVM-NEXT:     Name: sym2@@VERSION2
# LLVM-NEXT:   }
# LLVM-NEXT:   Symbol {
# LLVM-NEXT:     Version: 4
# LLVM-NEXT:     Name: sym3@v1
# LLVM-NEXT:   }
# LLVM-NEXT:   Symbol {
# LLVM-NEXT:     Version: 5
# LLVM-NEXT:     Name: sym4@v2
# LLVM-NEXT:   }
# LLVM-NEXT:   Symbol {
# LLVM-NEXT:     Version: 6
# LLVM-NEXT:     Name: sym5@v3
# LLVM-NEXT:   }
# LLVM-NEXT: ]
# LLVM-NEXT: VersionDefinitions [
# LLVM-NEXT:   Definition {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Flags [ (0x0)
# LLVM-NEXT:     ]
# LLVM-NEXT:     Index: 0
# LLVM-NEXT:     Hash: 0
# LLVM-NEXT:     Name: VERSION1
# LLVM-NEXT:     Predecessors: []
# LLVM-NEXT:   }
# LLVM-NEXT:   Definition {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Flags [ (0x1)
# LLVM-NEXT:       Base (0x1)
# LLVM-NEXT:     ]
# LLVM-NEXT:     Index: 0
# LLVM-NEXT:     Hash: 0
# LLVM-NEXT:     Name: VERSION1
# LLVM-NEXT:     Predecessors: []
# LLVM-NEXT:   }
# LLVM-NEXT:   Definition {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Flags [ (0x2)
# LLVM-NEXT:       Weak (0x2)
# LLVM-NEXT:     ]
# LLVM-NEXT:     Index: 0
# LLVM-NEXT:     Hash: 0
# LLVM-NEXT:     Name: VERSION1
# LLVM-NEXT:     Predecessors: []
# LLVM-NEXT:   }
# LLVM-NEXT:   Definition {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Flags [ (0x4)
# LLVM-NEXT:       Info (0x4)
# LLVM-NEXT:     ]
# LLVM-NEXT:     Index: 0
# LLVM-NEXT:     Hash: 0
# LLVM-NEXT:     Name: VERSION1
# LLVM-NEXT:     Predecessors: []
# LLVM-NEXT:   }
# LLVM-NEXT:   Definition {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Flags [ (0x7)
# LLVM-NEXT:       Base (0x1)
# LLVM-NEXT:       Info (0x4)
# LLVM-NEXT:       Weak (0x2)
# LLVM-NEXT:     ]
# LLVM-NEXT:     Index: 2
# LLVM-NEXT:     Hash: 175630257
# LLVM-NEXT:     Name: VERSION1
# LLVM-NEXT:     Predecessors: []
# LLVM-NEXT:   }
# LLVM-NEXT:   Definition {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Flags [ (0x8)
# LLVM-NEXT:     ]
# LLVM-NEXT:     Index: 3
# LLVM-NEXT:     Hash: 175630258
# LLVM-NEXT:     Name: VERSION2
# LLVM-NEXT:     Predecessors: [VERSION1, VERSION3]
# LLVM-NEXT:   }
# LLVM-NEXT: ]
# LLVM-NEXT: VersionRequirements [
# LLVM-NEXT:   Dependency {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Count: 5
# LLVM-NEXT:     FileName: verneed1.so.0
# LLVM-NEXT:     Entries [
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Hash: 0
# LLVM-NEXT:         Flags [ (0x1)
# LLVM-NEXT:           Base (0x1)
# LLVM-NEXT:         ]
# LLVM-NEXT:         Index: 0
# LLVM-NEXT:         Name: v1
# LLVM-NEXT:       }
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Hash: 0
# LLVM-NEXT:         Flags [ (0x2)
# LLVM-NEXT:           Weak (0x2)
# LLVM-NEXT:         ]
# LLVM-NEXT:         Index: 0
# LLVM-NEXT:         Name: v1
# LLVM-NEXT:       }
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Hash: 0
# LLVM-NEXT:         Flags [ (0x4)
# LLVM-NEXT:           Info (0x4)
# LLVM-NEXT:         ]
# LLVM-NEXT:         Index: 0
# LLVM-NEXT:         Name: v1
# LLVM-NEXT:       }
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Hash: 1938
# LLVM-NEXT:         Flags [ (0x7)
# LLVM-NEXT:           Base (0x1)
# LLVM-NEXT:           Info (0x4)
# LLVM-NEXT:           Weak (0x2)
# LLVM-NEXT:         ]
# LLVM-NEXT:         Index: 4
# LLVM-NEXT:         Name: v1
# LLVM-NEXT:       }
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Hash: 1939
# LLVM-NEXT:         Flags [ (0x8)
# LLVM-NEXT:         ]
# LLVM-NEXT:         Index: 5
# LLVM-NEXT:         Name: v2
# LLVM-NEXT:       }
# LLVM-NEXT:     ]
# LLVM-NEXT:   }
# LLVM-NEXT:   Dependency {
# LLVM-NEXT:     Version: 1
# LLVM-NEXT:     Count: 1
# LLVM-NEXT:     FileName: verneed2.so.0
# LLVM-NEXT:     Entries [
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Hash: 1937
# LLVM-NEXT:         Flags [ (0x0)
# LLVM-NEXT:         ]
# LLVM-NEXT:         Index: 6
# LLVM-NEXT:         Name: v3
# LLVM-NEXT:       }
# LLVM-NEXT:     ]
# LLVM-NEXT:   }
# LLVM-NEXT: ]

# GNU:      Version symbols section '.gnu.version' contains 6 entries:
# GNU-NEXT:  Addr: 0000000000000000  Offset: 0x000040  Link: 6 (.dynsym)
# GNU-NEXT:   000:   0 (*local*) 2 (VERSION1) 3 (VERSION2) 4 (v1)
# GNU-NEXT:   004:   5 (v2)      6 (v3)
# GNU-EMPTY:
# GNU-NEXT:  Version definition section '.gnu.version_d' contains 6 entries:
# GNU-NEXT:   Addr: 0000000000000000  Offset: 0x00004c  Link: 7 (.dynstr)
# GNU-NEXT:    0x0000: Rev: 1  Flags: none  Index: 0  Cnt: 1  Name: VERSION1
# GNU-NEXT:    0x001c: Rev: 1  Flags: BASE  Index: 0  Cnt: 1  Name: VERSION1
# GNU-NEXT:    0x0038: Rev: 1  Flags: WEAK  Index: 0  Cnt: 1  Name: VERSION1
# GNU-NEXT:    0x0054: Rev: 1  Flags: INFO  Index: 0  Cnt: 1  Name: VERSION1
# GNU-NEXT:    0x0070: Rev: 1  Flags: BASE | WEAK | INFO  Index: 2  Cnt: 1  Name: VERSION1
# GNU-NEXT:    0x008c: Rev: 1  Flags: <unknown>  Index: 3  Cnt: 3  Name: VERSION2
# GNU-NEXT:    0x00b0: Parent 1: VERSION1
# GNU-NEXT:    0x00b0: Parent 2: VERSION3
# GNU-EMPTY:
# GNU-NEXT:  Version needs section '.gnu.version_r' contains 2 entries:
# GNU-NEXT:   Addr: 0000000000000000  Offset: 0x000104  Link: 7 (.dynstr)
# GNU-NEXT:    0x0000: Version: 1  File: verneed1.so.0  Cnt: 5
# GNU-NEXT:    0x0010:   Name: v1  Flags: BASE  Version: 0
# GNU-NEXT:    0x0020:   Name: v1  Flags: WEAK  Version: 0
# GNU-NEXT:    0x0030:   Name: v1  Flags: INFO  Version: 0
# GNU-NEXT:    0x0040:   Name: v1  Flags: BASE | WEAK | INFO  Version: 4
# GNU-NEXT:    0x0050:   Name: v2  Flags: <unknown>  Version: 5
# GNU-NEXT:    0x0060: Version: 1  File: verneed2.so.0  Cnt: 1
# GNU-NEXT:    0x0070:   Name: v3  Flags: none  Version: 6

## Check that we report a warning when sh_link references a non-existent section.

# RUN: yaml2obj %s --docnum=2 -o %t2
# RUN: llvm-readobj -V %t2 2>&1 | FileCheck %s --check-prefix=INVALID-LINK-LLVM -DFILE=%t2
# RUN: not llvm-readelf -V %t2 2>&1 | FileCheck %s --check-prefix=INVALID-LINK-GNU -DFILE=%t2

# INVALID-LINK-LLVM: warning: '[[FILE]]': invalid section linked to SHT_GNU_verdef section with index 1: invalid section index: 255

## TODO: llvm-readelf should also report a meaningful warning instead of an error.
# INVALID-LINK-GNU: Version definition
# INVALID-LINK-GNU: error: '[[FILE]]': invalid section index: 255

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Link:    0xFF
    Info:    0x0
    Entries: []

## Check that we report a warning when the sh_link field of a SHT_GNU_verdef section references a non-string table section.

# RUN: yaml2obj %s --docnum=3 -o %t3
# RUN: llvm-readobj -V %t3 2>&1 | FileCheck %s --check-prefix=INVALID-STRING-TABLE -DFILE=%t3
# RUN: llvm-readelf -V %t3 2>&1 | FileCheck %s --check-prefix=INVALID-STRING-TABLE -DFILE=%t3

# INVALID-STRING-TABLE: warning: '[[FILE]]': invalid string table linked to SHT_GNU_verdef section with index 1: invalid sh_type for string table section [index 0]: expected SHT_STRTAB, but got SHT_NULL

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Link:    0x0
    Info:    0x0
    Entries: []

## Check that we report a warning when we can't read the content of the SHT_GNU_verdef section.

# RUN: yaml2obj %s --docnum=4 -o %t4
# RUN: llvm-readobj -V %t4 2>&1 | FileCheck %s --check-prefix=INVALID-DATA -DFILE=%t4
# RUN: llvm-readelf -V %t4 2>&1 | FileCheck %s --check-prefix=INVALID-DATA -DFILE=%t4

# INVALID-DATA: warning: '[[FILE]]': cannot read content of SHT_GNU_verdef section with index 1: section [index 1] has a sh_offset (0xffffffff) + sh_size (0x0) that cannot be represented

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:     .gnu.version_d
    Type:     SHT_GNU_verdef
    Link:     .dynstr
    Info:     0x0
    Entries:  []
    ShOffset: 0xFFFFFFFF
DynamicSymbols:
  - Name: foo

## Check that we report a warning when a SHT_GNU_verdef section contains a version definition
## that goes past the end of the section.

# RUN: yaml2obj %s --docnum=5 -o %t5
# RUN: llvm-readobj -V %t5 2>&1 | FileCheck %s --check-prefix=DEF-PAST-END -DFILE=%t5
# RUN: llvm-readelf -V %t5 2>&1 | FileCheck %s --check-prefix=DEF-PAST-END -DFILE=%t5

# DEF-PAST-END: warning: '[[FILE]]': invalid SHT_GNU_verdef section with index 1: version definition 1 goes past the end of the section

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Link:    .dynstr
    Info:    0x1
    Entries:
      - Version:    0
        Flags:      0
        VersionNdx: 0
        Hash:       0
        Names:
          - FOO
    ShSize: 1
DynamicSymbols:
  - Name: foo

## Check that we report a warning when a SHT_GNU_verdef section contains a version definition
## that refers to an auxiliary entry that goes past the end of the section.

# RUN: yaml2obj %s --docnum=6 -o %t6
# RUN: llvm-readobj -V %t6 2>&1 | FileCheck %s --check-prefix=AUX-PAST-END -DFILE=%t6
# RUN: llvm-readelf -V %t6 2>&1 | FileCheck %s --check-prefix=AUX-PAST-END -DFILE=%t6

# AUX-PAST-END: warning: '[[FILE]]': invalid SHT_GNU_verdef section with index 1: version definition 1 refers to an auxiliary entry that goes past the end of the section

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Link:    .dynstr
    Info:    0x1
    Entries:
      - Version:    0
        Flags:      0
        VersionNdx: 0
        Hash:       0
        Names:
          - FOO
    ShSize: 21
DynamicSymbols:
  - Name: foo

## Check that we can dump a SHT_GNU_verdef section properly even if it contains version names strings
## that overrun the linked string table.

# RUN: yaml2obj %s --docnum=7 -o %t7
# RUN: llvm-readobj -V %t7 2>&1 | FileCheck %s --check-prefix=PAST-STRTAB-END-LLVM --implicit-check-not="warning:" -DFILE=%t7
# RUN: llvm-readelf -V %t7 2>&1 | FileCheck %s --check-prefix=PAST-STRTAB-END-GNU --implicit-check-not="warning:" -DFILE=%t7

# PAST-STRTAB-END-LLVM:      VersionDefinitions [
# PAST-STRTAB-END-LLVM-NEXT:   Definition {
# PAST-STRTAB-END-LLVM-NEXT:     Version: 0
# PAST-STRTAB-END-LLVM-NEXT:     Flags [ (0x0)
# PAST-STRTAB-END-LLVM-NEXT:     ]
# PAST-STRTAB-END-LLVM-NEXT:     Index: 0
# PAST-STRTAB-END-LLVM-NEXT:     Hash: 0
# PAST-STRTAB-END-LLVM-NEXT:     Name: <invalid vda_name: 5>
# PAST-STRTAB-END-LLVM-NEXT:     Predecessors: []
# PAST-STRTAB-END-LLVM-NEXT:   }
# PAST-STRTAB-END-LLVM-NEXT: ]

# PAST-STRTAB-END-GNU:      Version definition section '.gnu.version_d' contains 1 entries:
# PAST-STRTAB-END-GNU-NEXT:  Addr: 0000000000000000  Offset: 0x000040  Link: 2 (.strtab)
# PAST-STRTAB-END-GNU-NEXT:   0x0000: Rev: 0  Flags: none  Index: 0  Cnt: 1  Name: <invalid vda_name: 5>

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Link:    .strtab
    Info:    0x1
    Entries:
      - Version:    0
        Flags:      0
        VersionNdx: 0
        Hash:       0
        Names:
          - FOO
  - Name: .strtab
    Type: SHT_STRTAB
DynamicSymbols:
  - Name: BAR

## Check we report a warning when a version definition is not correctly aligned in memory.

# RUN: yaml2obj %s --docnum=8 -o %t8
# RUN: llvm-readobj -V %t8 2>&1 | FileCheck %s --check-prefix=MISALIGNED-DEF -DFILE=%t8
# RUN: llvm-readelf -V %t8 2>&1 | FileCheck %s --check-prefix=MISALIGNED-DEF -DFILE=%t8

# MISALIGNED-DEF: warning: '[[FILE]]': invalid SHT_GNU_verdef section with index 1: found a misaligned version definition entry at offset 0x0

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Type: Fill
    Size: 0x1
  - Name: .gnu.version_d
    Type: SHT_GNU_verdef
    Link: .dynstr
    Info: 0x1
    Entries:
      - Version:    0
        Flags:      0
        VersionNdx: 0
        Hash:       0
        Names:
          - FOO
DynamicSymbols:
  - Name: foo

## Check we report a warning when an auxiliary entry is not correctly aligned in memory.

# RUN: yaml2obj %s --docnum=9 -o %t9
# RUN: llvm-readobj -V %t9 2>&1 | FileCheck %s --check-prefix=MISALIGNED-AUX -DFILE=%t9
# RUN: llvm-readelf -V %t9 2>&1 | FileCheck %s --check-prefix=MISALIGNED-AUX -DFILE=%t9

# MISALIGNED-AUX: warning: '[[FILE]]': invalid SHT_GNU_verdef section with index 1: found a misaligned auxiliary entry at offset 0x13

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_DYN
  Machine: EM_X86_64
Sections:
  - Name:  .gnu.version_d
    Type:  SHT_GNU_verdef
    Flags: [ SHF_ALLOC ]
    Link:  .dynstr
    Info:  0x1
## The byte offset to the auxiliary entry is 0x13, i.e. it is not correctly aligned in memory.
    Content: "0000000000000100000000001300000000000000"
DynamicSymbols:
  - Name:    foo
    Binding: STB_GLOBAL
